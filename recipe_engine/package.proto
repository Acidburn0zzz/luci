// Copyright 2016 The LUCI Authors. All rights reserved.
// Use of this source code is governed under the Apache License, Version 2.0
// that can be found in the LICENSE file.

// Recompile with protoc 3.1.0+:
// cd recipe_engine && protoc package.proto --python_out=.

syntax = "proto3";

package recipe_engine;

message DepSpec {
  // The URL of where to fetch the package data. Must always be a git repo URL.
  string url = 1;

  // The ref to git-fetch when syncing this dependency.
  string branch = 2;

  // The git commit that we depend on.
  string revision = 3;

  // Treat a subtree of a repo as a whole repo unto itself. This must match
  // the value of `recipes_path` in the target repo.
  string path_override = 4;

  enum RepoType {
    // Do a full 'git clone' of this dependency.
    GIT = 0;

    // Use GITILES to fetch the dependency data via the GITILES REST API.
    GITILES = 1;
  }
  // How this dependency should be fetched.
  //
  // NOTE: this option may be removed in the future in preference for
  // automatically picking the repo fetch method.
  RepoType repo_type = 5;
}

// These options control the behavior of the autoroller recipe:
//   https://chromium.googlesource.com/infra/infra/+/master/recipes/recipes/recipe_autoroller.py
message AutorollRecipeOptions {
  // These control the behavior of the autoroller when it finds a trivial roll
  // (i.e. a roll without expectation changes).
  message TrivialOptions {
    // These email addresses will be TBR'd.
    repeated string tbr_emails = 1;

    // If true, the autoroller recipe will automatically CQ the change.
    bool automatic_commit = 2;
  }
  TrivialOptions trivial = 1;

  // These control the behavior of the autoroller when it finds a non-trivial
  // roll (i.e. a roll with expectation changes but which otherwise completes
  // the simulation tests).
  message NontrivialOptions {
    // These add additional reviewer emails on the change.
    repeated string extra_reviewer_emails = 1;

    // If true, the autoroller recipe will automatically do a CQ dry run when
    // uploading the change.
    bool automatic_commit_dry_run = 2;
  }
  NontrivialOptions nontrivial = 2;

  // Make the autoroller skip this repo entirely with a human-readable message.
  string disable_reason = 3;
}

message Package {
  // The "API Version" of this proto. Should always equal 1, currently. This may
  // change if a backwards-incompatible update must be done for the proto. In
  // the event that a backwards incompatible change happens, however,
  // api_version will remain at tag 1.
  int32 api_version = 1;  // Version 2

  // The "id" of how this package is referred to within recipes. This becomes
  // the prefix in DEPS when something depends on one of this package's modules
  // (e.g.  DEPS=["recipe_engine/path"]). This should match the name of the repo
  // in the luci-config service associated with the repo, and should not contain
  // slashes.
  string project_id = 2;

  // This is the URL which points to the 'source of truth' for this repo. It's
  // meant to be used for documentation generation.
  string canonical_repo_url = 3;

  // The path (using forward slashes) to where the base of the recipes are found
  // in the repo (i.e. where the "recipes" and/or "recipe_modules" directories
  // live).
  string recipes_path = 4;

  // A mapping of a dependency ("project_id") to spec needed to fetch its code.
  map<string, DepSpec> deps = 5;

  // The autoroller options for this repo. These options will be respected by
  // the autoroller recipe (which currently lives here:
  //   https://chromium.googlesource.com/infra/infra/+/master/recipes/recipes/recipe_autoroller.py
  // ).
  AutorollRecipeOptions autoroll_recipe_options = 6;
}
